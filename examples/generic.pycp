cinclude "stdio.h" as stdio
cinclude "stdlib.h" as stdlib

@generic
def Point(T) {
    cstruct S {
        T x;
        T y;
    }
    S.len = cfunction T(S p) {
        T x = p.x;
        T y = p.y;
        return T.add(T.mul(x, x), T.mul(y, y));
    };
    S.add = cfunction S(S a, S b) {
        return (S){T.add(a.x, b.x), T.add(a.y, b.y)};
    };
    S.sub = cfunction S(S a, S b) {
        return (S){T.sub(a.x, b.x), T.sub(a.y, b.y)};
    };
    return S;
}

@generic
def new(T) {
    return cfunction T*() {
        return stdlib.calloc(1, sizeof(T));
    };
}

@generic
def destroy(T) {
    return cfunction void(T* o) {
        stdlib.free(o);
    };
}

@generic
def add(T, b) {
    return cfunction T(T a) {
        return T.add(a, b);
    };
}

cdef cint main() {
    Point[cint]* a = new[Point[cint]]();
    Point[cint] b = {1, 2};
    Point[cint] c = Point[cint].add(*a, b);

    stdio.printf("Len: " cint.format "\n", Point[cint].len(c));

    stdio.printf("2 + 3 = " cint.format "\n", add[cint, 2](3));
    stdio.printf("2. + 3. = " cdouble.format "\n", add[cdouble, 2](3));

    destroy[Point[cint]](a);
    return 0;
}

build("generic.c", main=main);