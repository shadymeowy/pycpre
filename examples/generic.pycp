cinclude "stdio.h" as stdio
cinclude "stdlib.h" as stdlib

@generic
def Point(T=cdouble) {
    cstruct S {
        T x;
        T y;
    }
    S.len = cfunction T(S p) {
        T x = p.x;
        T y = p.y;
        return T.add(T.mul(x, x), T.mul(y, y));
    };
    S.add = cfunction S(S a, S b) {
        return (S){T.add(a.x, b.x), T.add(a.y, b.y)};
    };
    S.sub = cfunction S(S a, S b) {
        return (S){T.sub(a.x, b.x), T.sub(a.y, b.y)};
    };
    return S;
}

cdef new[T]() -> T* {
    return stdlib.calloc(1, sizeof(T));
}

cdef destroy[T](T* p) -> void {
    stdlib.free(p);
}

cdef add[T=cint, N=1](T a) -> T {
    return T.add(a, N);
}

cdef cint main() {
    Point* a = new[Point]();
    Point b = {1, 2};
    Point c = Point.add(*a, b);

    stdio.printf("Len: " cdouble.format "\n", Point.len(c));

    stdio.printf(cint.format "\n", add(3));
    stdio.printf(cdouble.format "\n", add[cdouble](3));
    stdio.printf(cdouble.format "\n", add[cdouble, 2](3));

    destroy[Point](a);
    return 0;
}

build(main, path="generic.c");